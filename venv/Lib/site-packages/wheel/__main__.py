import mysql.connector
from mysql.connector import Error

hostname = "poh.h.filess.io"
database = "programowaniePython_perhapsput"
port = "3306"
username = "programowaniePython_perhapsput"
password = "67a62bde8f9675a69684d0ec6dfb9ca357836da9"

# Funkcja do tworzenia połączenia z bazą danych
def utworz_polaczenie():
    try:
        # Ustanawianie połączenia z bazą danych
        polaczenie = mysql.connector.connect(host=hostname, database=database, user=username, password=password, port=port)
        if polaczenie.is_connected():
            return polaczenie
    except Error as e:
        # Obsługa błędu przy połączeniu z bazą danych
        print("Błąd przy łączeniu się z bazą danych", e)
        return None

# Funkcja do wyświetlania wszystkich samochodów w bazie danych
def pokaz_samochody(cursor):
    # Wykonanie zapytania SELECT
    cursor.execute("SELECT * FROM samochody")
    # Pobranie wszystkich wierszy wyniku
    samochody = cursor.fetchall()
    # Wyświetlenie informacji o samochodach
    for samochod in samochody:
        print(samochod)

# Funkcja do dodawania samochodu do bazy danych
def dodaj_samochod(cursor, marka, model, rok_produkcji, cena):
    try:
        # Sprawdzenie czy rok produkcji jest liczbą całkowitą
        rok_produkcji = int(rok_produkcji)
    except ValueError:
        print("Błąd: Rok produkcji musi być liczbą całkowitą.")
        return

    try:
        # Sprawdzenie czy cena jest liczbą
        cena = float(cena)
    except ValueError:
        print("Błąd: Cena musi być liczbą.")
        return

    # Wykonanie zapytania INSERT
    cursor.execute('''
        INSERT INTO samochody (marka, model, rok_produkcji, cena)
        VALUES (%s, %s, %s, %s)
    ''', (marka, model, rok_produkcji, cena))

# Funkcja do usuwania samochodu z bazy danych
def usun_samochod(cursor, samochod_id):
    # Wykonanie zapytania DELETE
    cursor.execute("DELETE FROM samochody WHERE id = %s", (samochod_id,))

# Funkcja do edycji danych samochodu w bazie danych
def edytuj_samochod(cursor, samochod_id):
    while True:
        # Wykonanie zapytania SELECT, aby uzyskać aktualne informacje o samochodzie
        cursor.execute("SELECT * FROM samochody WHERE id = %s", (samochod_id,))
        samochod = cursor.fetchone()

        if samochod:
            print("Edytuj samochód (ID:", samochod_id, ")")
            print("1. Edytuj markę")
            print("2. Edytuj model")
            print("3. Edytuj rok produkcji")
            print("4. Edytuj cenę")
            print("0. Powrót")

            wybor = input("Wybierz opcję: ")

            if wybor == "1":
                nowa_marka = input("Nowa marka: ")
                # Wykonanie zapytania UPDATE dla marki
                cursor.execute("UPDATE samochody SET marka = %s WHERE id = %s", (nowa_marka, samochod_id))
            elif wybor == "2":
                nowy_model = input("Nowy model: ")
                # Wykonanie zapytania UPDATE dla modelu
                cursor.execute("UPDATE samochody SET model = %s WHERE id = %s", (nowy_model, samochod_id))
            elif wybor == "3":
                try:
                    nowy_rok_produkcji = int(input("Nowy rok produkcji: "))
                except ValueError:
                    print("Błąd: Rok produkcji musi być liczbą całkowitą.")
                    continue
                # Wykonanie zapytania UPDATE dla roku produkcji
                cursor.execute("UPDATE samochody SET rok_produkcji = %s WHERE id = %s", (nowy_rok_produkcji, samochod_id))
            elif wybor == "4":
                try:
                    nowa_cena = float(input("Nowa cena: "))
                except ValueError:
                    print("Błąd: Cena musi być liczbą.")
                    continue
                # Wykonanie zapytania UPDATE dla ceny
                cursor.execute("UPDATE samochody SET cena = %s WHERE id = %s", (nowa_cena, samochod_id))
            elif wybor == "0":
                print("Powrót do głównego menu.")
                break
            else:
                print("Nieprawidłowy wybór.")

            print("Edycja zakończona.")
            # Zatwierdzenie zmian w bazie danych
            polaczenie.commit()
        else:
            print("Brak samochodu o podanym ID.")
            break

# Funkcja do wyświetlania menu
def menu():
    print("\nMenu:")
    print("1. Pokaż samochody")
    print("2. Dodaj samochód")
    print("3. Usuń samochód")
    print("4. Edytuj samochód")
    print("0. Wyjdź")

if __name__ == "__main__":
    # Utworzenie połączenia z bazą danych
    polaczenie = utworz_polaczenie()

    if polaczenie:
        try:
            cursor = polaczenie.cursor()

            while True:
                # Wyświetlenie głównego menu
                menu()
                wybor = input("Wybierz opcję: ")
                print("")

                if wybor == "1":
                    # Wyświetlenie wszystkich samochodów
                    pokaz_samochody(cursor)
                elif wybor == "2":
                    # Dodanie nowego samochodu
                    marka = input("Podaj markę: ")
                    model = input("Podaj model: ")
                    rok_produkcji = input("Podaj rok produkcji: ")
                    cena = input("Podaj cenę: ")
                    dodaj_samochod(cursor, marka, model, rok_produkcji, cena)
                    # Zatwierdzenie zmian w bazie danych
                    polaczenie.commit()
                elif wybor == "3":
                    # Usunięcie samochodu
                    samochod_id = input("Podaj ID samochodu do usunięcia: ")
                    usun_samochod(cursor, samochod_id)
                    # Zatwierdzenie zmian w bazie danych
                    polaczenie.commit()
                elif wybor == "4":
                    # Edycja samochodu
                    samochod_id = input("Podaj ID samochodu do edycji: ")
                    edytuj_samochod(cursor, samochod_id)
                elif wybor == "0":
                    # Zakończenie programu
                    break
                else:
                    print("Nieprawidłowy wybór. Wybierz ponownie.")

        except Error as e:
            # Obsługa błędu związanego z bazą danych
            print("Błąd z bazą danych", e)

        finally:
            if polaczenie.is_connected():
                cursor.close()
                polaczenie.close()
                print("Przerwano połączenie z bazą danych")